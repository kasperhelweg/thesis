namespace KHJ {
  namespace thesis {
    namespace stores {
      
      template <typename N, typename C>
      constexpr C magical_heap_store<N, C>::magical_heap_store::compare_;

      /**
       * Constructor.
       * 
       * complexity is (probably) O(1)
       * @author KHJ
       *
       */
      
      template <typename N, typename C>
      magical_heap_store<N, C>::magical_heap_store( ) : top_( nullptr )
      { 
        store_.push_back( root_store( ) );
        
        lo_.push_back( store_.begin( ) );
        state_ = { store_.begin( ) };
      }
      

      /**
       * De-Constructor.
       * 
       * complexity is (probably) O(1)
       * @author KHJ
       *
       */
      
      
      template <typename N, typename C>
      magical_heap_store<N, C>::~magical_heap_store( ) 
      {
        std::cout << "HeapStore dies" << std::endl;
        store_.clear( );
      }

      /**
       * Top( )
       * 
       * complexity is (probably) O(1)
       * @author KHJ
       *
       */
      
      
      template <typename N, typename C>
      N* magical_heap_store<N, C>::top( ) 
      { 
        return top_;
      }


      /**
       * Print the numeral
       * 
       * @author KHJ
       *
       */
      
      template <typename N, typename C>
      void magical_heap_store<N, C>::print( ) 
      { 
        std::cout << "-----------------" << std::endl ;
        for( store_iterator_type it = store_.begin(); it != store_.end(); ++it) {
          std::cout << (*it).size( ) << " " ;
        } 
        std::cout << std::endl;
        std::cout << "-----------------" << std::endl ; 
        std::cout << "hi: ";
        if( !hi_.empty( )) {
          for( auto it = hi_.begin(); it != hi_.end(); ++it) {
            std::cout << (*(*it)).size( ) << " " ;
          }
        } else {
          std::cout << "empty";
        }
        
        
        std::cout << std::endl;
        std::cout << "-----------------" << std::endl ; 
        std::cout << "lo: ";
        if( !lo_.empty( )) {
          for( auto it = lo_.begin(); it != lo_.end(); ++it) {
            std::cout << (*(*it)).size( ) << " " ;
          }
         
        } else {
          std::cout << "empty";
        }
     
        std::cout << std::endl << std::endl ;
      }
      

      template<typename N, typename C>
      void magical_heap_store<N, C>::inject( N* n ) 
      { 
        root_store* F = &store_.front( );
        (*F).push_back( n );
                        
        if( (*F).size( ) == 2 ) { lo_.pop_back( ); } 
        if( (*F).size( ) == 3 ) { fix_( store_.begin( ) ); 
        } else {
          if( !hi_.empty( ) ) {
            store_iterator_type J = hi_.back( ); hi_.pop_back( ); 
            fix_( J );
          }
        }
      }
      
      template<typename N, typename C>
      N* magical_heap_store<N, C>::eject( ) 
      { 
        N* B = borrow_( );
        //top_ = scan_top_( );

        //std::cout << top_->element_ << std::endl;
        return B;
      }


      // The heap store shouldnt 
      template<typename N, typename C>
      N* magical_heap_store<N, C>::remove( N* S ) 
      { 
        
      }


      template<typename N, typename C>
      N* magical_heap_store<N, C>::remove_min( ) 
      { 
        N* T = remove( top_ );
        top_ = scan_top_( );

        return T;
        
      }



      template<typename N, typename C>
      typename magical_heap_store<N, C>::store_iterator_type magical_heap_store<N, C>::begin( ) 
      { 
        return store_.begin( );
      }

      
      template<typename N, typename C>
      typename magical_heap_store<N, C>::store_iterator_type magical_heap_store<N, C>::end( ) 
      { 
        return store_.end( );
      }

      /**
       * Fix( ).
       * 
       * complexity is (probably) O(1)
       * @author KHJ
       *
       */
      
      template <typename N, typename C>
      void magical_heap_store<N, C>::fix_( store_iterator_type I ) 
      { 
        //std::cout << "-----------------" << std::endl ;
        //std::cout << "fix" << std::endl ;
        if( std::next( I ) == store_.end( ) ) { grow_( std::next( I ) ); } 
        store_iterator_type E = std::next( I );
        store_iterator_type W = std::prev( I );
        
        // decrement by 3
        N* P = I->back( ); I->pop_back( );
        N* Q = I->back( ); I->pop_back( );
        N* R = I->back( ); I->pop_back( );
        
        N* t[3] = { P, Q, R };     
        swap_nodes_( t, 0, compare_( *t[1], *t[0] ) );
        swap_nodes_( t, 2, compare_( *t[0], *t[2] ) );
        
        if( W != store_.end( ) ) {
          N** st = t[0]->split( );
          t[0]->join_heaps( t[1], t[2] ); E->push_back( t[0] );
          
          if( W->size( ) <= 1 ) { lo_.pop_back( ); }
          update_lo_( E );
          
          W->push_back(st[0]); W->push_back(st[1]); delete[] st; st=nullptr;
          if( W->size( ) >= 3 ) { hi_.push_back( W ); }
        } else {
          t[0]->join_heaps( t[1], t[2] ); E->push_back( t[0] );
          update_lo_( E );
        }
        lo_.push_back( I );
      }
      
      /**
       * Unfix( ).
       * 
       * complexity is (probably) O(1)
       * @author KHJ
       *
       */
      
      template <typename N, typename C>
      void magical_heap_store<N, C>::unfix_( store_iterator_type I ) 
      {
        store_iterator_type E = std::next( I );
        store_iterator_type W = std::prev( I );
        
        N* P   = E->back( ); E->pop_back( );
        N** st = P->split( );


        if( E->size( ) == 0 && std::next( E ) == store_.end( ) ) {
          lo_.pop_back( );
          shrink_( E );
        } else {
          if( E->size( ) == 1 ) {
            lo_.push_back( E );
          } else if( E->size( ) == 2 ){
            hi_.pop_back( );
          }
        }

        if( W == store_.end( ) ) {
        } else {
          if( W->size() >= 3 ) {
            hi_.pop_back( );
          }
          N* Q = W->back( ); W->pop_back( );
          N* R = W->back( ); W->pop_back( );
          if( W->size() <= 1 && W != store_.begin( ) ) {
             lo_.push_back( W );
          }
          P->join_heaps( Q, R );
          P->siftdown( );
          if( !(P->is_root( )) ) {
            P = P->find_root( );
          }
        }
        
        I->push_back( P );
        I->push_back( st[0] );
        I->push_back( st[1] );
        delete[] st;
        st = nullptr;
        hi_.push_back( I );
      }

      /**
       * Borrow( ).
       * 
       * complexity is (probably) O(1)
       * @author KHJ
       *
       */
      
      template <typename N, typename C>
      N* magical_heap_store<N, C>::borrow_( ) 
      { 
        N* B;
        store_iterator_type I = store_.begin( );
        
        if( !in_idle_state_() && !lo_.empty( ) ) {
          store_iterator_type J;
          if( state_[0]->size() == 2 && state_[1]->size() == 2) {
            if( !hi_.empty( ) && hi_.back( )->size( ) == 3 ) {
              J = lo_.back( ); lo_.pop_back( );
              unfix_( J );
            }
          } else {
            J = lo_.back( ); lo_.pop_back( );
            unfix_( J );
          }
        }
        B = I->back( ); I->pop_back( );
        if( I->size( ) == 2 ) {
          hi_.pop_back( );
        } else if( I->size( ) <= 1 && lo_.back( ) != I ) {
          lo_.push_back( I );
        }
        return B;
      }

          
      /**
       * Grow_( ).
       * 
       * complexity is (probably) O(1)
       * @author KHJ
       *
       */
      
      template <typename N, typename C>
      void magical_heap_store<N, C>::grow_( store_iterator_type I ) 
      { 
        store_.push_back( root_store( ) );
        //store_.emplace( I ); 
        if( state_.size( ) == 1) { state_.push_back( std::prev( I ) ); }
      }
      
      /**
       * Shrink_( ).
       * 
       * complexity is (probably) O(1)
       * @author KHJ
       *
       */
      
      template <typename N, typename C>
      void magical_heap_store<N, C>::shrink_( store_iterator_type I ) 
      { 
        store_.erase( I );
      }

      template <typename N, typename C>
      N* magical_heap_store<N, C>::scan_top_( ) 
      { 
        N* T = nullptr;

        for( auto it = store_.begin( ) ; it != store_.end( ) ; it++ ) {
          for( auto vit = (*it).begin( ) ; vit != (*it).end( ) ; vit++ ) {
            if( T == nullptr || compare_( *(*vit), *T  ) ) {
              T = *vit;
            }
          }
        }
        return T;
      }

      template <typename N, typename C>
      bool magical_heap_store<N, C>::in_idle_state_( ) 
      { 
        // idle state 21t
        if( state_[0]->size() == 2 && state_[1]->size() == 1) {
          return true;
        } else if( state_[0]->size() == 1 && state_[1]->size() == 2) {
          if( !hi_.empty( ) ) {
            return false;
          } else {
            if( lo_.size( ) == 1 || lo_[lo_.size()-2] == std::prev( store_.end( ) ) ) {
              return true;
            } else {
              return false;
            }
          }
        } else {
          return false;
        }
      }

      // swap aux
      template <typename N, typename C>
      void  magical_heap_store<N, C>::swap_nodes_ (N* nodes[], int i1, int i2) {
        N* temp = nodes[i1];
        nodes[i1] = nodes[i2];
        nodes[i2] = temp;
      }

      template <typename N, typename C>
      void  magical_heap_store<N, C>::update_lo_ (store_iterator_type E) {
        if( E->size( ) == 1 && lo_.empty( )  ) { lo_.push_back( E ); }
        else if( E->size( ) == 2 ) { lo_.pop_back( ); }
        else if( E->size( ) == 3 ) { hi_.push_back( E ); }
      }
    }
  }
}
