#include <assert.h>
#include <iostream>

namespace KHJ  {
  namespace thesis  {
    namespace heap_node  {
      
      template <typename V, typename C, typename A>
      constexpr C heap_a_node<V, C, A>::heap_a_node::compare_;
      
      /*********************************************************************
       *                                                                   *
       *               N o d e T y p e A  \  P u b l i c                   *
       *                                                                   *
       *********************************************************************/
      
      /**
       * Constructor.
       * 
       * complexity is (probably) O(1)
       * @author KHJ
       *
       */
      template <typename V, typename C, typename A>
      heap_a_node<V, C, A>::heap_a_node( const V& e ) : 
        element_( e ), color_( 0 ), left_( nullptr ) , right_( nullptr ) { }

      /**
       * Constructor with color.
       * 
       * complexity is (probably) O(1)
       * @author KHJ
       *
       */
      template <typename V, typename C, typename A>
      heap_a_node<V, C, A>::heap_a_node( const V& e, bool c ) : 
        element_( e ), color_( c ), left_( nullptr ) , right_( nullptr ) { }
           
      /**
       * DeConstructor.
       * 
       * complexity is (probably) O(1)
       * @author KHJ
       *
       */
      template <typename V, typename C, typename A>
      heap_a_node<V, C, A>::~heap_a_node( ) { 
        
      }    
      
      /**
       * Comparison operators
       * 
       * complexity is (probably) O(1)
       * @author KHJ
       *
       */
      //-----------------------------
      template <typename V, typename C, typename A>
      inline bool heap_a_node<V, C, A>::operator<(const N& other) const
      {
        return element_ < other.element_;
      }

      template <typename V, typename C, typename A>
      inline bool heap_a_node<V, C, A>::operator>(const N& other) const
      {
        return !operator<(other);
      }

      template <typename V, typename C, typename A>
      inline bool heap_a_node<V, C, A>::operator==(const N& other) const
      {
        return element_ == other.element_;
      }
      
      template <typename V, typename C, typename A>
      inline bool heap_a_node<V, C, A>::operator!=(const N& other) const
      {
        return !operator==(other);
      }

      template <typename V, typename C, typename A>
      inline bool heap_a_node<V, C, A>::operator<=(const N& other) const
      {
        return !operator>(other);
      }

      template <typename V, typename C, typename A>
      inline bool heap_a_node<V, C, A>::operator>=(const N& other) const
      {
        return !operator<(other);
      }
      //-----------------------------
      

      /**
       * is_root( )
       * 
       * complexity is O(1) requiring 1 element comp.
       * @author KHJ
       *
       */

      template <typename V, typename C, typename A>
      bool heap_a_node<V, C, A>::is_root( ) const
      {
        return right_ == nullptr;
      }

      /**
       * is_leaf( )
       * 
       * complexity is O(1) requiring 1 element comp.
       * @author KHJ
       *
       */
      template <typename V, typename C, typename A>
      bool heap_a_node<V, C, A>::is_leaf( ) const
      {
        return left_ == nullptr;
      }
      
      /**
       * parent( )
       * 
       * complexity is O(1).
       * @author KHJ
       *
       */
      template <typename V, typename C, typename A>
      typename heap_a_node<V, C,A>::N* heap_a_node<V, C, A>::parent( ) const
      {
        if( color_ == 0 && !is_root( ) ) { return (*right_).right_; } 
        else { return right_; }
      }

      /**
       * left_child( )
       * 
       * complexity is O(1).
       * @author KHJ
       *
       */
      template <typename V, typename C, typename A>
      typename heap_a_node<V, C,A>::N* heap_a_node<V, C, A>::left_child( ) const
      {
        assert(!is_leaf( )); return left_;
      }

      /**
       * right_child( )
       * 
       * complexity is O(1).
       * @author KHJ
       *
       */
      template <typename V, typename C, typename A>
      typename heap_a_node<V, C,A>::N* heap_a_node<V, C, A>::right_child( ) const
      {
        assert(!is_leaf( )); return (*left_).right_;
      }

      /**
       * find_root( )
       * 
       * complexity is O(lg n).
       * @author KHJ
       *
       */
      template <typename V, typename C, typename A>
      typename heap_a_node<V, C,A>::N* heap_a_node<V, C, A>::find_root( ) const
      {
        N* r((N*)this);  
        while( (*r).right_ != nullptr ) { 
          r = (*r).right_; 
        }
        
        //assert((*r).is_root( ));
        return r;
      }

      /**
       * height( )
       * 
       * complexity is O(lg n).
       * @author KHJ
       *
       */
      template <typename V, typename C, typename A>
      int heap_a_node<V, C, A>::height( ) const
      {
        int h = 0;
        
        N* r((N*)this);  
        while( !(*r).is_leaf() ) { 
          r = (*r).left_; h++;
        }
        
        //assert((*r).is_leaf( ));
        return h;
      }

      /**
       * join( )
       * 
       * complexity is O(1).
       * @author KHJ
       *
       */
      template <typename V, typename C, typename A>
      void heap_a_node<V, C, A>::join( N* l, N* r )
      {        
        (*l).right_ = r; 
        (*r).right_ = this;
        (*r).color_ = 1;
        left_       = l;
      }

      /**
       * join_heaps( )
       * 
       * unlike join, this method assert that all join nodes are roots.
       * complexity is O(1).
       * @author KHJ
       *
       */
      template <typename V, typename C, typename A>
      void heap_a_node<V, C, A>::join_heaps( N* l, N* r )
      {
        //assert(is_root( ) && (*l).is_root( ) && (*r).is_root( ));
        join( l, r );
      }
      
      /**
       * replace( )
       * 
       * complexity is O(1).
       * @author KHJ
       *
       */
      template <typename V, typename C, typename A>
      typename heap_a_node<V, C,A>::N* heap_a_node<V, C, A>::replace( N* O )
      {
        N* P = this;
        
        (*O).left_  = (*P).left_;
        (*O).right_ = (*P).right_;
        (*O).color_ = (*P).color_;
        
        if( !(*O).is_root( ) && !(*O).is_leaf( ) ) {
          if( (*O).color_ == 0) {
            if( (*O).is_root( ) ) {
              (*(*(*O).left_).right_).right_ = O;
            } else if ( (*O).is_leaf( ) ) {
              (*(*(*O).right_).right_).left_ = O;
            } else {
              (*(*(*O).left_).right_).right_ = O;
              (*(*(*O).right_).right_).left_ = O;
            }
          } else {
            if ( (*O).is_leaf( )  ) {
              (*(*(*O).right_).left_).right_ = O;
            } else {
              (*(*(*O).right_).left_).right_ = O;
              (*(*(*O).left_).right_).right_ = O;
            }
          }
          (*P).left_  = nullptr;
          (*P).right_ = nullptr;
        }
        return P;
      }

      template <typename V, typename C, typename A>
      std::unique_ptr<typename heap_a_node<V,C,A>::N*[]> heap_a_node<V, C, A>::split( )
      {
        //assert(is_root( ));
        
        // not too c++'ish...but what...
        std::unique_ptr<N*[]> st(new N*[2]);
        //N** st = new N*[2];
        st[0]  = left_ ;
        st[1]  = (*left_).right_; (*st[1]).color_ = 0;

        (*st[1]).right_ = nullptr; 
        (*st[0]).right_ = nullptr; 
        left_           = nullptr; 
        
        //assert(is_root( )); assert((*st[0]).is_root( )); assert((*st[1]).is_root( ));
        return st;
      }

      /*********************************************************************
       *                                                                   *
       *               N o d e T y p e A  \  P r i va t e                  *
       *                                                                   *
       *********************************************************************/
      
      template <typename V, typename C, typename A>
      void heap_a_node<V, C, A>::swap_colors( N* O )
      {
        bool oc = (*O).color_;
        (*O).color_ = color_; color_ = oc;
      }

      template <typename V, typename C, typename A>
      void heap_a_node<V, C, A>::siftup( )
      {
        N* P = parent( );
        //while( !is_root( ) && ( element_ < (*P).element_ ) ) {
        while( !is_root( ) && ( compare_( element_, (*P).element_ ) ) ) {
          swap( P ); P = parent( );
        }
      }
      
      template <typename V, typename C, typename A>
      void heap_a_node<V, C, A>::siftdown( )
      {
        N* L;
        N* R;
        N* S;

        while( !is_leaf( ) ) {
          L = left_;
          R = (*left_).right_;
          // comparator(*L, *R)
          //if((*L).element_ < (*R).element_ ) {
          if( compare_( (*L).element_, (*R).element_ ) ) {
            S = L; 
          } else { 
            S = R; 
          }
          //if( (*S).element_ < element_ ) {
          if( compare_( (*S).element_,  element_ ) ) {
            (*S).swap( this ); 
          } else { 
            break; 
          }
        }
      }

      template <typename V, typename C, typename A>
      void heap_a_node<V, C, A>::swap( N* R )
      {
        //case 0 - left node, parent is root'''
        if( (*R).is_root( ) && color_ == 0 ) {
          //std::cout << "case 0" << std::endl;
          //             
          //     R           P
          //    / \   <=>   / \
          //   P - Q       R - Q
          //  /   /       /   /
        
          N* P = this;
          N* Q = (*P).right_;
          
          // Cut out
          (*P).right_ = (*R).right_;
          (*R).left_  = (*P).left_;
          (*Q).right_ = P;
          
          (*P).left_  = R;
          (*R).right_ = Q;
          
          if( !(*R).is_leaf( )) { (*(*(*R).left_).right_).right_ = R; }
          
          //assert((*P).is_root( ));
          //assert((*P).left_ == R);
        } 
        // case 0-1 - right node, parent is root'''
        else if( (*R).is_root( ) && color_ == 1 ) { 
          //std::cout << "case 0-1" << std::endl;
          //               
          //     R           P
          //    / \   <=>   / \
          //   Q - P       Q - R
          //  /   /       /   /
          
          N* P = this;
          N* Q = (*R).left_;

          (*P).right_ = (*R).right_;
          (*R).left_  = (*P).left_;
          (*Q).right_ = R;
                    
          (*P).left_  = Q;
          (*R).right_ = P;
          
          if( !(*R).is_leaf( )) { (*(*(*R).left_).right_).right_ = R; }
          
          swap_colors( R );
          
          //assert((*P).is_root( ));
          //assert((*P).left_ == Q);
        }
        // case 1 - left node, left subtree'''
        else if( (*R).color_ == 0 && color_ == 0 ) { 
          //std::cout << "case 1" << std::endl;
          //      /           /
          //     R-          P-
          //    / \   <=>   / \
          //   P - Q       R - Q
          //  /   /       /   /

          N* P = this;
          N* Q = (*P).right_;

          (*P).right_ = (*R).right_;
          (*R).left_  = (*P).left_;
          (*P).left_  = R;
          (*R).right_ = Q;
          (*Q).right_ = P;
          
          if( !(*P).is_root( )) { (*(*(*P).right_).right_).left_ = P; }
          if( !(*R).is_leaf( )) { (*(*(*R).left_).right_).right_ = R; }
        }
        // case 2 - right node, left subtree'''
        else if( (*R).color_ == 0 && color_ == 1 ) { 
          //std::cout << "case 2" << std::endl;
          //      /           /
          //     R-          P-
          //    / \   <=>   / \
          //   Q - P       Q - R
          //  /   /       /   /

          N* P = this;
          N* Q = (*R).left_;

          (*P).right_ = (*R).right_;
          (*R).left_  = (*P).left_;
          (*P).left_  = Q;
          (*R).right_ = P;
          (*Q).right_ = R;
          
          if( !(*P).is_root( )) { (*(*(*P).right_).right_).left_ = P; }
          if( !(*R).is_leaf( )) { (*(*(*R).left_).right_).right_ = R; }

          swap_colors( R );
        }
        // case 3 - left node, right subtree'''
        else if( (*R).color_ == 1 && color_ == 0 ) {
          //std::cout << "case 3" << std::endl;
          //    \           \
          //    -R          -P
          //    / \   <=>   / \
          //   P - Q       R - Q
          //  /   /       /   /

          N* P = this;
          N* Q = (*P).right_;

          (*P).right_ = (*R).right_;
          (*R).left_  = (*P).left_;
          (*P).left_  = R;
          (*R).right_ = Q;
          (*Q).right_ = P;
          
          if( !(*P).is_root( )) { (*(*(*P).right_).left_).right_ = P; }
          if( !(*R).is_leaf( )) { (*(*(*R).left_).right_).right_ = R; }

          swap_colors( R );
        }
        // case 4 - right node, right subtree'''
        else if( (*R).color_ == 1 && color_ == 1 ) { 
          //std::cout << "case 4" << std::endl;
          //    \           \
          //    -R          -P
          //    / \   <=>   / \
          //   Q - P       Q - R
          //  /   /       /   /

          N* P = this;
          N* Q = (*R).left_;
          
          (*P).right_ = (*R).right_;
          (*R).left_  = (*P).left_;
          (*P).left_  = Q;
          (*R).right_ = P;
          (*Q).right_ = R;
          
          if( !(*P).is_root( )) { (*(*(*P).right_).left_).right_ = P; }
          if( !(*R).is_leaf( )) { (*(*(*R).left_).right_).right_ = R; }
        } else {
          // Handle pathology
        }
      }
    }
  }
}
