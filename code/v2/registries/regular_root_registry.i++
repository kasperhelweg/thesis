namespace KHJ  {
  namespace thesis  {
    namespace root_registry  {
      /**
       * Constructor.
       * 
       * complexity is (probably) O(1)
       * @author KHJ
       *
       */
      template<typename N, typename M, typename S>
      regular_root_registry<N, M, S>::regular_root_registry( )
      { }

      /**
       * DeConstructor.
       * 
       * complexity is (probably) O(1)
       * @author KHJ
       *
       */
      template<typename N, typename M, typename S>
      regular_root_registry<N, M, S>::~regular_root_registry( ) 
      { }
      
      /**
       * top( )
       * 
       * complexity is (probably) O(1)
       * @author KHJ
       *
       */
      template<typename N, typename M, typename S>
      N* regular_root_registry<N, M, S>::top( ) const
      { 
        return root_table_.top; 
      }

      /**
       * size( )
       * 
       * complexity is (probably) O(1)
       * @author KHJ
       *
       */
      template<typename N, typename M, typename S>
      int regular_root_registry<N, M, S>::size( ) const
      { 
        return root_table_.size( ); 
      }

      
      /**
       * insert( )
       * 
       * complexity is (probably) O(1)
       * @author KHJ
       *
       */
      template<typename N, typename M, typename S>
      void regular_root_registry<N, M, S>::insert( N* Q )
      { 
        if( root_table_.top == nullptr || 
            modifier_type::compare_( (*Q).element(), (*root_table_.top).element() ) ) { 
          root_table_.top = Q; 
        } 
        
        root_table_.push_front( Q );
      }

      /**
       * extract( )
       * 
       * complexity is (probably) O(1)
       * @author KHJ
       *
       */
      template<typename N, typename M, typename S>
      N* regular_root_registry<N, M, S>::extract( )
      { 
      
      }
       
      /**
       * consolidate( )
       * 
       * complexity is (probably) O(1)
       * @author KHJ
       *
       */
      template<typename N, typename M, typename S>
      void regular_root_registry<N, M, S>::consolidate( )
      { 
      
      }

      /**
       * update_top( )
       * 
       * complexity is (probably) O(1)
       * @author KHJ
       *
       */
      template<typename N, typename M, typename S>
      void regular_root_registry<N, M, S>::update_top( )
      {
      
      }
       
      template<typename N, typename M, typename S>
      void regular_root_registry<N, M, S>::print( ) const
      {
      
      }

      // swap aux
      template <typename N, typename M, typename S>
      void regular_root_registry<N, M, S>::swap_nodes_ (N* nodes[], int i1, int i2) 
      {
        N* temp   = nodes[i1];
        nodes[i1] = nodes[i2];
        nodes[i2] = temp;
      }
    }
  }
}
