namespace KHJ  {
  namespace thesis  {
    namespace store {
      
      /**
       * Constructor.
       * 
       * complexity is (probably) O(1)
       * @author KHJ
       *
       */
      template<typename N>
      paper_store<N>::paper_store( ) : top_( nullptr )
      {
        root_store s; s.reserve( 4 );
        store_.push_back( s );
      }

      /**
       * DeConstructor.
       * 
       * complexity is (probably) O(1)
       * @author KHJ
       *
       */
      template<typename N>
      paper_store<N>::~paper_store( ) 
      { }

      /**
       * top( )
       * 
       * complexity is (probably) O(1)
       * @author KHJ
       *
       */
      template<typename N>
      N* paper_store<N>::top( ) const
      { 
        return top_;
      }

      /**
       * push_front( )
       * 
       * complexity is (probably) O(1)
       * @author KHJ
       *
       */
      template<typename N>
      void paper_store<N>::push_front( N* S ) 
      { 
        (*(begin( ))).push_back( S );
      }

      /**
       * pop_front( )
       * 
       * complexity is (probably) O(1)
       * @author KHJ
       *
       */
      template<typename N>
      N* paper_store<N>::pop_front( ) 
      { 
      }

      /**
       * insert( I position )
       * 
       * complexity is (probably) O(1)
       * @author KHJ
       *
       */
      template<typename N>
      void paper_store<N>::insert( iterator_type position, N* S )
      { 
        if( position == end( ) ) {
          grow_( position ); (*std::prev(position)).push_back( S );
        } else {
          (*position).push_back( S );
        }
      }

      /**
       * extract( I position )
       * 
       * complexity is (probably) O(1)
       * @author KHJ
       *
       */
      template<typename N>
      N* paper_store<N>::extract( iterator_type position )
      { 
        N* S = position->back( ); position->pop_back( );
        return S;
      }

      /** private auxiliary **/

      // grow_( ).
      
      template <typename N>
      void paper_store<N>::grow_( iterator_type position ) 
      { 
        root_store s; s.reserve( 4 );
        store_.push_back( s );
      }

      // shrink_( ).
      
      template <typename N>
      void paper_store<N>::shrink_( iterator_type position ) 
      { 
        store_.erase( position );
      }
      
      template<typename N>
      void paper_store<N>::print( ) const
      { 
        std::cout << "-----------------" << std::endl ;
        for( auto it = store_.begin( ); it != store_.end( ); ++it) {
          std::cout << (*it).size( ) << " " ;
        } 
        std::cout << std::endl << std::endl ;     
      }
    }
  }
}
