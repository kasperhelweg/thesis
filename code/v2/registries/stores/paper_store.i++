namespace KHJ  {
  namespace thesis  {
    namespace store {
      
      /**
       * Constructor.
       * 
       * complexity is (probably) O(1)
       * @author KHJ
       *
       */
      template<typename N>
      paper_store<N>::paper_store( )
      {
        root_store f; f.reserve( 4 ); node n1( f ); 
        root_store s; s.reserve( 4 ); node n2( s );
        store_.push_back( n1 ); store_.push_back( n2 );
      }

      /**
       * DeConstructor.
       * 
       * complexity is (probably) O(1)
       * @author KHJ
       *
       */
      template<typename N>
      paper_store<N>::~paper_store( ) 
      { }

      /**
       * push_front( )
       * 
       * complexity is (probably) O(1)
       * @author KHJ
       *
       */
      template<typename N>
      void paper_store<N>::push_front( N* S ) 
      { 
        (*(begin( ))).root_list_.push_back( S ); 
        (*begin( )).size_++;
      }

      /**
       * pop_front( )
       * 
       * complexity is (probably) O(1)
       * @author KHJ
       *
       */
      template<typename N>
      N* paper_store<N>::pop_front( ) 
      { 
        //return (*(begin( ))).pop_back( ); 
        //return (*(begin( ))).pop_back( ); 
      }

      template <typename N>
      int paper_store<N>::size( iterator_type I ) 
      { 
        return store_.size( );
      }


      /**
       * insert( I position )
       * 
       * complexity is (probably) O(1)
       * @author KHJ
       *
       */
      template<typename N>
      void paper_store<N>::insert( iterator_type position, N* S )
      { 
        (*position).root_list_.push_back( S );
        (*position).size_++;
      }

      /**
       * extract( I position )
       * 
       * complexity is (probably) O(1)
       * @author KHJ
       *
       */
      template<typename N>
      N* paper_store<N>::extract( iterator_type position )
      {
        N* S = (*position).root_list_.back( ); (*position).root_list_.pop_back( );
        (*position).size_--;
        
        return S;
      }
      
      // grow_( ).
      
      template <typename N>
      void paper_store<N>::grow( ) 
      { 
        root_store s; s.reserve( 4 ); node n1( s ); 
        store_.push_back( s );
      }

      // shrink_( ).
      
      template <typename N>
      void paper_store<N>::shrink(  ) 
      { store_.pop_back( ); }
      
      template<typename N>
      void paper_store<N>::print( ) const
      { 
        std::cout << "-----------------" << std::endl ;
        for( auto it = store_.begin( ); it != store_.end( ); ++it) {
          std::cout << (*it).size( ) << " " ;
        } 
        std::cout << std::endl;     
      }
    }
  }
}
