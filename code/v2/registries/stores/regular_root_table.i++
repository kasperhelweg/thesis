namespace KHJ  {
  namespace thesis  {
    namespace root_table {
      
      /**
       * Constructor.
       * 
       * complexity is (probably) O(1)
       * @author KHJ
       *
       */
      template<typename N>
      regular_root_table<N>::regular_root_table( ) : top( nullptr )
      {
        root_table_node n1; 
        root_table_.push_back( n1 ); 
      }

      /**
       * DeConstructor.
       * 
       * complexity is (probably) O(1)
       * @author KHJ
       *
       */
      template<typename N>
      regular_root_table<N>::~regular_root_table( ) 
      { }

      /**
       * push_front( )
       * 
       * complexity is (probably) O(1)
       * @author KHJ
       *
       */
      template<typename N>
      void regular_root_table<N>::push_front( N* S ) 
      { 
   
      }

      /**
       * pop_front( )
       * 
       * complexity is (probably) O(1)
       * @author KHJ
       *
       */
      template<typename N>
      N* regular_root_table<N>::pop_front( ) 
      { 
        
      }

      template <typename N>
      int regular_root_table<N>::size( ) const
      { 
    
      }

      /**
       * insert( I position )
       * 
       * complexity is (probably) O(1)
       * @author KHJ
       *
       */
      template<typename N>
      void regular_root_table<N>::insert( iterator_type position, N* S )
      { 
  
      }

      /**
       * extract( I position )
       * 
       * complexity is (probably) O(1)
       * @author KHJ
       *
       */
      template<typename N>
      N* regular_root_table<N>::extract( iterator_type position )
      {
     
      }

      /**
       * extract( N* R )
       * 
       * complexity is (probably) O(1)
       * @author KHJ
       *
       */
      template<typename N>
      N* regular_root_table<N>::extract( iterator_type position, root_list_iterator_type index )
      {
      
      }
        
      // grow_( ).
      
      template <typename N>
      void regular_root_table<N>::grow( ) 
      { 
     
      }

      // shrink_( ).
      
      template <typename N>
      void regular_root_table<N>::shrink(  ) 
      { 
      }
      
      template<typename N>
      void regular_root_table<N>::print( ) const
      { 
      
      }
    }
  }
}
