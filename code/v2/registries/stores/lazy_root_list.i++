namespace KHJ  {
  namespace thesis  {
    namespace root_list {
      
      /**
       * Constructor.
       * 
       * complexity is (probably) O(1)
       * @author KHJ
       *
       */
      template<typename N>
      lazy_root_list<N>::lazy_root_list( ) : top( nullptr ), size_( 0 )
      {
        
      }

      /**
       * DeConstructor.
       * 
       * complexity is (probably) O(1)
       * @author KHJ
       *
       */
      template<typename N>
      lazy_root_list<N>::~lazy_root_list( ) 
      { }

      /**
       * push_front( )
       * 
       * complexity is (probably) O(1)
       * @author KHJ
       *
       */
      template<typename N>
      void lazy_root_list<N>::push_front( N* S ) 
      { 
        root_list_.push_back( S );
        size_ += pow( 2, (*S).height( ) + 1) - 1;
      }

      /**
       * pop_front( )
       * 
       * complexity is (probably) O(1)
       * @author KHJ
       *
       */
      template<typename N>
      N* lazy_root_list<N>::pop_front( ) 
      { 
        N* S = root_list_.back( ); 
        root_list_.pop_back( ); 
        size_ -= pow( 2, (*S).height( ) + 1) - 1;
        return S;
      }

      template <typename N>
      int lazy_root_list<N>::size( ) const
      { 
        return size_;
      }

      template <typename N>
      bool lazy_root_list<N>::empty( ) const
      { 
        return size_ == 0;
      }

      template <typename N>
      bool lazy_root_list<N>::one_heap( ) const
      { 
        return root_list_.size( ) == 1;
      }
      
      template<typename N>
      void lazy_root_list<N>::print( ) const
      { 
        std::cout << "size: " << size( ) << std::endl;     
        std::cout << "-----------------" << std::endl ;
        std::cout << "< ";
        for( auto it = begin( ); it != end( ); ++it) {
          std::cout << (*it)->height( ) << " ";
        } 
        std::cout << ">" << std::endl;     
      }
    }
  }
}
