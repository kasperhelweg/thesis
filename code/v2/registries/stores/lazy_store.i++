namespace KHJ  {
  namespace thesis  {
    namespace store {
      
      /**
       * Constructor.
       * 
       * complexity is (probably) O(1)
       * @author KHJ
       *
       */
      template<typename N>
      lazy_store<N>::lazy_store( ) : top( nullptr ), size_( 0 )
      {
        head_.push_front( store_ );
      }

      /**
       * DeConstructor.
       * 
       * complexity is (probably) O(1)
       * @author KHJ
       *
       */
      template<typename N>
      lazy_store<N>::~lazy_store( ) 
      { }

      /**
       * push_front( )
       * 
       * complexity is (probably) O(1)
       * @author KHJ
       *
       */
      template<typename N>
      void lazy_store<N>::push_front( N* S ) 
      { 
        (*(begin( ))).push_back( S );
        size_ += pow( 2, (*S).height( ) + 1) - 1;
      }

      /**
       * pop_front( )
       * 
       * complexity is (probably) O(1)
       * @author KHJ
       *
       */
      template<typename N>
      N* lazy_store<N>::pop_front( ) 
      { 
        N* S = (*(begin( ))).back( ); 
        (*(begin( ))).pop_back( ); 
        size_ -= pow( 2, (*S).height( ) + 1) - 1;
        return S;
      }

      template <typename N>
      int lazy_store<N>::size( ) const
      { 
        return size_;
      }

      template <typename N>
      bool lazy_store<N>::empty( ) const
      { 
        return size_ == 0;
      }

      template <typename N>
      bool lazy_store<N>::one_heap( ) const
      { 
        return (*begin()).size() == 1;
      }
      
      template<typename N>
      void lazy_store<N>::print( ) const
      { 
        std::cout << "size: " << size( ) << std::endl;     
        std::cout << "-----------------" << std::endl ;
        std::cout << "< ";
        for( auto it = begin( ); it != end( ); ++it) {
          for( auto vit = (*it).begin( ); vit != (*it).end( ); ++vit) {
            std::cout << (*vit)->height( ) << " ";
          }
        } 
        std::cout << ">" << std::endl;     
      }
    }
  }
}
