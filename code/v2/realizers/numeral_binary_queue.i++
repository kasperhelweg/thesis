namespace KHJ  {
  namespace thesis  {
    namespace queue  {

      template<typename E, typename C, typename N, typename M, typename R>
      N* numeral_binary_queue<E, C, N, M, R>::find_min(  ) 
      {
        N* S = registry_.top( );
        return S;
      }

      template<typename E, typename C, typename N, typename M, typename R>
      void numeral_binary_queue<E, C, N, M, R>::insert( N* S ) 
      {
        registry_.insert( S );
        registry_.consolidate( );
      }
    
      template<typename E, typename C, typename N, typename M, typename R>
      N* numeral_binary_queue<E, C, N, M, R>::erase_min( ) 
      {
        N* T = registry_.top( ); 
        N* B = registry_.extract( );

        if( B != T  ) {
          modifier_type::replace( T, B );
          modifier_type::siftup_( B ); 
          modifier_type::siftdown_( B );
          
          for( auto it = registry_.begin( ) ; it != registry_.end( ) ; it++ ) {
            for( auto vit = (*it).begin( ) ; vit != (*it).end( ) ; vit++ ) {
              if( (*vit) == T  ) {
                *vit = (*B).find_root( ); 
              }
            }
          }
        }
         
        registry_.update_top( );
        return T;
      }

      template<typename E, typename C, typename N, typename M, typename R>
      void numeral_binary_queue<E, C, N, M, R>::erase( N* P ) 
      {
        bool is_root = (*P).is_root( );

        N* B = registry_.extract( );
        if( B != P  ) {
          modifier_type::replace( P, B );
          modifier_type::siftup_( B ); 
          modifier_type::siftdown_( B );           
          
          for( auto it = registry_.begin( ) ; it != registry_.end( ) ; it++ ) {
            for( auto vit = (*it).begin( ) ; vit != (*it).end( ) ; vit++ ) {
              if( !(*(*vit)).is_root( ) ) {
                *vit = (*(*vit)).find_root();
              } else if( (*vit) == P  ) {
                *vit = (*B).find_root( ); 
              }
            }
          }
        }
        if( P == registry_.top( ) ) { registry_.update_top( ); }
      }
    }
  }
}
